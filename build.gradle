// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-beta03'
        classpath 'com.google.gms:google-services:4.0.1'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://github.com/QuickBlox/quickblox-android-sdk-releases/raw/master/"
        }
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }
}

ext {
    compileSdkVersion = 27
    buildToolsVersion = "27.0.3"
    minSdkVersion = 21
    targetSdkVersion = 27

    supportLibVersion = '27.1.1'
    qbSdkVersion = '3.8.1'
    robotoTextViewVersion = '2.4.3'
    okhttpLibraryVersion = '3.9.1'

    libraries = [
            kotlin              : '1.1.51',
            dagger              : "2.12",
            rx_android          : "2.0.2",
            rx_java             : "2.1.12",
            arrow               : "1.0.0",
            retrofit            : "2.2.0",
            firebase            : "16.0.0",
            firebase_database   : "16.0.1",
            firebase_auth       : "16.0.1",
            firebase_storage    : "16.0.1",
            firebase_messaging  : "17.0.0",
            firebase_config     : "16.0.0",
    ]
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}

def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    if (!version['build']) version['build'] = "0"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['patch']}"
}

def readBuildCode() {
    def version = readVersion()
    def build = version['build'] as int
    return build
}

def incrementBuildNumber() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()
    def patch = version['patch'] as int
    patch++
    version['patch'] = patch.toString()
    def build = version['build'] as int
    build++
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Build number is now... ${build}"
    return build
}

def incrementVersionNumber(def type = "minor") {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()
    def major = version['major'] as int
    def minor = version['minor'] as int

    if (type == 'major') {
        major++
        minor = 0
    } else if (type == 'minor') {
        minor++
    }
    version['major'] = major.toString()
    version['minor'] = minor.toString()
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Version is now... ${major}.${minor}"
}

task doMajorVersionIncrement << {
    println "Incrementing major version..."
    incrementVersionNumber('major')
}

task doMinorVersionIncrement << {
    println "Incrementing minor version..."
    incrementVersionNumber('minor')
}

task doBuildNumberIncrement << {
    println "Incrementing build number..."
    incrementBuildNumber()
}